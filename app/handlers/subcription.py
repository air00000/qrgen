# app/handlers/subscription.py
import asyncio, os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from services.cryptopay import create_invoice, get_invoices
from services.db import add_subscription, has_active_subscription, init_db, latest_subscription
from config import CFG

PLAN_PRICE = float(os.getenv("PLAN_MONTH_PRICE", "2.5"))
PLAN_DAYS = int(os.getenv("PLAN_MONTH_DAYS", "30"))
ASSET = os.getenv("CRYPTOPAY_ASSET", "TON")

def subscription_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ({PLAN_PRICE} {ASSET} / {PLAN_DAYS} –¥–Ω.)", callback_data="SUB:CREATE")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="MENU")]
    ])

async def subscription_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if has_active_subscription(uid):
        sub = latest_subscription(uid)
        text = f"‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub.end_at:%Y-%m-%d %H:%M UTC}."
        await update.message.reply_text(text, reply_markup=subscription_menu_kb())
    else:
        await update.message.reply_text(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR/PDF.\n–û—Ñ–æ—Ä–º–∏ –µ—ë –Ω–∏–∂–µ:",
            reply_markup=subscription_menu_kb()
        )

async def sub_create_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    uid = update.effective_user.id
    desc = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {PLAN_DAYS} –¥–Ω–µ–π –¥–ª—è @{update.effective_user.username or uid}"
    payload = f"user:{uid}|plan:month"
    try:
        inv = await asyncio.to_thread(create_invoice, ASSET, PLAN_PRICE, desc, payload)
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=inv["pay_url"]),
            InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data=f"SUB:CHECK:{inv['invoice_id']}")
        ],[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="MENU")
        ]])
        await update.callback_query.message.edit_text(
            f"–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ¬ª.",
            reply_markup=kb
        )
    except Exception as e:
        await update.callback_query.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")

async def sub_check_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É‚Ä¶")
    parts = update.callback_query.data.split(":")
    invoice_id = parts[-1]
    try:
        items = await asyncio.to_thread(get_invoices, [invoice_id])
        status = items[0].get("status")
        if status == "paid":
            # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            add_subscription(update.effective_user.id, "month", invoice_id, PLAN_DAYS)
            await update.callback_query.message.edit_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="MENU")]])
            )
        elif status == "active":
            await update.callback_query.message.reply_text("–°—á—ë—Ç –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        else:
            await update.callback_query.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞: {status}")
    except Exception as e:
        await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π guard
async def require_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    uid = update.effective_user.id
    if has_active_subscription(uid):
        return True
    # –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    if update.callback_query:
        await update.callback_query.message.reply_text("–ù—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=subscription_menu_kb())
    else:
        await update.message.reply_text("–ù—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=subscription_menu_kb())
    return False
