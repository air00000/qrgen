from telegram import Update
from telegram.error import BadRequest
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
)

from app.keyboards.admin_api_keys import (
    get_admin_api_menu,
    get_api_keys_list_keyboard,
    get_key_actions_keyboard,
    get_delete_confirm_keyboard
)
from app.services.apikey import generate_key, get_all_keys, delete_key, update_key_name, get_key_name
from app.config import CFG
from app.handlers.menu import start as show_main_menu
from app.utils.state_stack import push_state, pop_state, clear_stack

# –°–æ—Å—Ç–æ—è–Ω–∏—è
API_MENU, API_WAIT_NAME, API_LIST, API_EDIT_MENU, API_DELETE_MENU, API_VIEW_KEY, API_WAIT_NEW_NAME = range(7)


def _is_admin(update: Update) -> bool:
    uid = update.effective_user.id if update.effective_user else None
    return uid in getattr(CFG, "ADMIN_IDS", set())


async def _edit_or_send(update: Update, text: str, reply_markup=None, parse_mode="HTML"):
    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)


# ===== –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã =====

async def api_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª API –∫–ª—é—á–µ–π"""
    if not _is_admin(update):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END

    await update.callback_query.answer()
    clear_stack(context.user_data)
    return await show_api_menu(update, context)


async def show_api_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é API"""
    push_state(context.user_data, API_MENU)
    await _edit_or_send(update, "üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_admin_api_menu())
    return API_MENU


async def ask_key_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    push_state(context.user_data, API_WAIT_NAME)
    context.user_data["awaiting_key_name"] = True
    await _edit_or_send(update, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞:")
    return API_WAIT_NAME


async def show_keys_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π"""
    push_state(context.user_data, API_LIST)
    keys = get_all_keys()
    if not keys:
        await _edit_or_send(update, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API –∫–ª—é—á–µ–π.")
        return await show_api_menu(update, context)

    await _edit_or_send(update, f"üìã <b>–°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π</b> ({len(keys)}):",
                        reply_markup=get_api_keys_list_keyboard(keys, "API:VIEW_"))
    return API_LIST


async def show_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    push_state(context.user_data, API_EDIT_MENU)
    keys = get_all_keys()
    if not keys:
        await _edit_or_send(update, "üì≠ –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return await show_api_menu(update, context)

    await _edit_or_send(update, "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
                        reply_markup=get_api_keys_list_keyboard(keys, "API:EDIT_"))
    return API_EDIT_MENU


async def show_delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è"""
    push_state(context.user_data, API_DELETE_MENU)
    keys = get_all_keys()
    if not keys:
        await _edit_or_send(update, "üì≠ –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return await show_api_menu(update, context)

    await _edit_or_send(update, "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
                        reply_markup=get_api_keys_list_keyboard(keys, "API:DELETE_"))
    return API_DELETE_MENU


async def show_key_details(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞"""
    push_state(context.user_data, API_VIEW_KEY)
    key_name = get_key_name(key)

    if not key_name:
        await _edit_or_send(update, "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await show_api_menu(update, context)

    context.user_data["current_key"] = key

    text = (
        f"üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {key_name}\n"
        f"<b>–ö–ª—é—á:</b> <code>{key}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    )
    await _edit_or_send(update, text, reply_markup=get_key_actions_keyboard(key))
    return API_VIEW_KEY


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π =====

async def on_generate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await ask_key_name(update, context)


async def on_list_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await show_keys_list(update, context)


async def on_edit_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await show_edit_menu(update, context)


async def on_delete_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await show_delete_menu(update, context)


async def on_view_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–∞"""
    data = update.callback_query.data
    key = data.replace("API:VIEW_", "", 1)
    await update.callback_query.answer()
    return await show_key_details(update, context, key)


async def on_edit_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
    data = update.callback_query.data
    key = data.replace("API:EDIT_", "", 1)
    await update.callback_query.answer()
    return await show_key_details(update, context, key)


async def on_delete_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞"""
    data = update.callback_query.data
    key = data.replace("API:DELETE_", "", 1)

    key_name = get_key_name(key)
    if not key_name:
        await update.callback_query.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return await show_delete_menu(update, context)

    await update.callback_query.answer()

    text = (
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
        f"<b>–ö–ª—é—á:</b> {key_name}\n"
        f"<code>{key}</code>\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    await _edit_or_send(update, text, reply_markup=get_delete_confirm_keyboard(key))
    return API_DELETE_MENU


async def on_edit_name_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
    data = update.callback_query.data
    key = data.replace("API:EDIT_NAME_", "", 1)

    context.user_data["current_key"] = key
    context.user_data["awaiting_new_name"] = True
    push_state(context.user_data, API_WAIT_NEW_NAME)

    key_name = get_key_name(key)
    await update.callback_query.answer()

    text = f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ <b>{key_name}</b>:"
    await _edit_or_send(update, text)
    return API_WAIT_NEW_NAME


async def on_delete_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    data = update.callback_query.data
    key = data.replace("API:DELETE_CONFIRM_", "", 1)

    key_name = get_key_name(key)
    if delete_key(key):
        await update.callback_query.answer("‚úÖ –ö–ª—é—á —É–¥–∞–ª—ë–Ω")
        await _edit_or_send(update, f"‚úÖ –ö–ª—é—á <b>{key_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
                            reply_markup=get_admin_api_menu())
    else:
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        await _edit_or_send(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.",
                            reply_markup=get_admin_api_menu())
    return API_MENU


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ =====

async def on_key_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    if not context.user_data.get("awaiting_key_name"):
        return API_MENU

    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return API_WAIT_NAME

    key = generate_key(name)
    context.user_data["awaiting_key_name"] = False

    text = (
        f"‚úÖ <b>–ù–æ–≤—ã–π API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
        f"<b>–ö–ª—é—á:</b> <code>{key}</code>\n\n"
        f"‚ö†Ô∏è <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω!</i>"
    )
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_admin_api_menu())
    clear_stack(context.user_data)
    return API_MENU


async def on_new_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not context.user_data.get("awaiting_new_name"):
        return API_VIEW_KEY

    new_name = (update.message.text or "").strip()
    key = context.user_data.get("current_key")

    if not new_name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return API_WAIT_NEW_NAME

    if update_key_name(key, new_name):
        context.user_data["awaiting_new_name"] = False
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{new_name}</b>",
            parse_mode="HTML",
            reply_markup=get_admin_api_menu()
        )
        clear_stack(context.user_data)
        return API_MENU
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—é—á–∞.",
            reply_markup=get_admin_api_menu()
        )
        return API_MENU


# ===== –ù–∞–≤–∏–≥–∞—Ü–∏—è =====

async def api_back_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥"""
    await update.callback_query.answer()
    pop_state(context.user_data)
    prev = pop_state(context.user_data)

    if prev is None or prev == API_MENU:
        return await show_api_menu(update, context)
    elif prev == API_LIST:
        return await show_keys_list(update, context)
    elif prev == API_EDIT_MENU:
        return await show_edit_menu(update, context)
    elif prev == API_DELETE_MENU:
        return await show_delete_menu(update, context)
    elif prev == API_VIEW_KEY:
        key = context.user_data.get("current_key")
        if key:
            return await show_key_details(update, context, key)

    return await show_api_menu(update, context)


async def api_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.callback_query.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    clear_stack(context.user_data)
    await show_main_menu(update, context)
    return ConversationHandler.END


# ===== Conversation Handler =====

api_keys_conv = ConversationHandler(
    name="api_keys_flow",
    entry_points=[
        CallbackQueryHandler(api_entry, pattern=r"^KEYS:START$"),
    ],
    states={
        API_MENU: [
            CallbackQueryHandler(on_generate_cb, pattern=r"^API:GEN$"),
            CallbackQueryHandler(on_list_cb, pattern=r"^API:LIST$"),
            CallbackQueryHandler(on_edit_menu_cb, pattern=r"^API:EDIT_MENU$"),
            CallbackQueryHandler(on_delete_menu_cb, pattern=r"^API:DELETE_MENU$"),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_WAIT_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, on_key_name_input),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_LIST: [
            CallbackQueryHandler(on_view_key_cb, pattern=r"^API:VIEW_.+"),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_EDIT_MENU: [
            CallbackQueryHandler(on_edit_key_cb, pattern=r"^API:EDIT_.+"),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_DELETE_MENU: [
            CallbackQueryHandler(on_delete_key_cb, pattern=r"^API:DELETE_.+"),
            CallbackQueryHandler(on_delete_confirm_cb, pattern=r"^API:DELETE_CONFIRM_.+"),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_VIEW_KEY: [
            CallbackQueryHandler(on_edit_name_cb, pattern=r"^API:EDIT_NAME_.+"),
            CallbackQueryHandler(on_delete_key_cb, pattern=r"^API:DELETE_.+"),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
        API_WAIT_NEW_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, on_new_name_input),
            CallbackQueryHandler(api_back_cb, pattern=r"^API:BACK$"),
            CallbackQueryHandler(api_menu_cb, pattern=r"^API:MENU$"),
        ],
    },
    fallbacks=[CommandHandler("start", api_menu_cb)],
    allow_reentry=True,
)